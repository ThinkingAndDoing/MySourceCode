import hashlib
import binascii


#g_lstPassword = [ 0x88, 0x90, 0x24, 0x05, 0xDF, 0xAF, 0x47, 0x07, 0xF2, 0xD9, 0x3C, 0xD3, 0x5E, 0xF2, 0x28, 0xF4]
g_lstPassword = [ 0xE2, 0xBA, 0x47, 0x77, 0x59, 0xD1, 0x6B, 0x21, 0x1D, 0xE8, 0xDD, 0x40, 0x91, 0x0E, 0xD1, 0x07]

g_lstSalt = [ 0x74, 0x76, 0x32, 0x63, 0x36, 0x6D, 0x5F, 0x73, 0x6E, 0x61, 0x6E, 0x64, 0x30, 0x30, 0x30, 0x31, 0x30, 0x10, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3, 0x01, 0xB0, 0x62, 0x00, 0x00, 0x00, 0x00, 0x24, 0x2F, 0x38, 0x7B, 0xAA, 0x5E, 0x6D, 0x53, 0xD4, 0xFD, 0x08, 0xC2, 0xB9, 0xC5, 0xBE, 0x57]


def list_2_bytes():
    hex_list = [ 0xD4, 0x7D, 0x65, 0x26, 0xFB, 0x8D, 0x40, 0xF3, 0xE1, 0x55, 0x77, 0xFC, 0x67, 0x41, 0x8B, 0xD0]  # 示例的16进制整数列表

    # 使用bytes()构造函数将16进制整数列表转换为字节流
    byte_stream = bytes(hex_list)

    # 打印字节流
    print(byte_stream)


def format_hex(hex_key):
    num = int(len(hex_key) / 2)

    lstKey = []
    for i in range(0, num):
        lstKey.append("0x" + str.upper(hex_key[i * 2 : (i + 1) * 2]))

    return lstKey


def derive_pbkdf2(password, salt, key_size):
    """key_size: derived-key-len for the output, e.g. 32 bytes (256 bits)"""

    # 使用 hashlib 模块中的 pbkdf2_hmac 函数来计算密钥
    bytes_key = hashlib.pbkdf2_hmac(
        "sha256", password, salt, 1024, dklen=key_size
    )  # 1000是迭代次数，dklen是生成的Hash字节数，可以根据需求调整

    return bytes_key


if __name__ == "__main__":
    # derive_pbkdf2(b'my_secure_password', b'mysalt', 32)

    derived_key = derive_pbkdf2(bytes(g_lstPassword), bytes(g_lstSalt), 16)
    
    # 打印生成的密钥
    hex_key = binascii.hexlify(derived_key).decode()
    print("hex_key       = "+hex_key)
    print("format_key   = "+format_hex(hex_key))

    
    
    